{%- import 'common_macros.j2' as cm with context -%}

{%- set header_guard = snakecase(device.name).upper() + '_H' -%}
#ifndef {{ header_guard }}
#define {{ header_guard }}

// Standard Library Imports
#include <stdint.h>
#include <stdbool.h>

// DSDL receive imports
{%- if device.messages.receive %}
{%- for rx_message in device.messages.receive %}
#include "{{ dsdl_header_path(rx_message.port_type) }}"
{%- endfor %}
{%- endif %}
{%- if device.services.server %}
{%- for service in device.services.server %}
#include "{{ dsdl_header_path(service.port_type) }}"
{%- endfor %}
{%- endif %}
{%- if device.messages.transmit %}
// DSDL transmit imports
{%- for tx_message in device.messages.transmit %}
#include "{{ dsdl_header_path(tx_message.port_type) }}"
{%- endfor %}
{%- endif %}

// NODE_ID definition
#ifndef NODE_ID
#error "NODE_ID must be defined (e.g., compile with -DNODE_ID=<id>)"
#endif

// Nova CAN Library Imports
#include "nova_can.h"

#define CAN_MASK (0xFF<<8)
#define CAN_FILTER (NODE_ID<<8)

// Port enums
{%- if device.messages.transmit %}
typedef enum {
{%- for tx_message in device.messages.transmit %}
    NOVA_CAN_{{snakecase(device.name).upper()}}_MSG_TRANSMIT_{{snakecase(tx_message.name).upper()}} = {{tx_message.port_id}},
{%- endfor %}
} MSG_TRANSMIT_PORT;
{%- endif %}
{%- if device.messages.receive %}
typedef enum {
{%- for rx_message in device.messages.receive %}
    NOVA_CAN_{{snakecase(device.name).upper()}}_MSG_RECEIVE_{{snakecase(rx_message.name).upper()}} = {{rx_message.port_id}},
{%- endfor %}
} MSG_RECEIVE_PORT;
{%- endif %}
{%- if device.services.server %}
typedef enum {
{%- for service in device.services.server %}
    NOVA_CAN_{{snakecase(device.name).upper()}}_SRV_SERVER_{{snakecase(service.name).upper()}} = {{service.port_id}},
{%- endfor %}
} SRV_SERVER_PORT;
{%- endif %}
{%- if device.services.client %}
typedef enum {
{%- for service in device.services.client %}
    NOVA_CAN_{{snakecase(device.name).upper()}}_SRV_CLIENT_{{snakecase(service.name).upper()}} = {{service.port_id}},
{%- endfor %}
} SRV_CLIENT_PORT;
{%- endif %}

// Callback function declarations (implemented by user)
{%- if device.messages.receive %}
{%- for rx_message in device.messages.receive %}
int {{cm.callback_function_name(device.name, rx_message.name)}}(NOVA_CAN_CANID *can_id_struct, {{cm.port_type_msg(rx_message.port_type)}} *data);
{%- endfor %}

{% endif -%}
{%- if device.services.server %}
{%- for service in device.services.server %}
int {{cm.callback_function_name(device.name, service.name)}}(NOVA_CAN_CANID *can_id_struct, {{cm.port_type_srv(service.port_type, True)}} *data);
{%- endfor %}

{% endif -%}
{%- if device.services.client %}
{%- for service in device.services.client %}
int {{cm.callback_function_name(device.name, service.name)}}(NOVA_CAN_CANID *can_id_struct, {{cm.port_type_srv(service.port_type, False)}} *data);
{%- endfor %}

{% endif -%}
{%- if device.messages.transmit %}
// User-implemented single-frame message send function
// Implement this in your device to actually put the frame on the bus
int nova_can_{{snakecase(device.name)}}_tx_impl(uint32_t can_id, uint8_t *data, size_t length);

{% endif -%}
{%- if device.messages.receive %}
// User-implemented single-frame message receive function
// Should return 1 if a message was received, 0 otherwise
int nova_can_{{snakecase(device.name)}}_rx_impl(uint32_t *can_id, uint8_t *data, size_t *length);

{% endif -%}

// Forward declarations for generated functions
{%- if device.messages.receive %}
int nova_can_{{snakecase(device.name)}}_msgs_rx (NOVA_CAN_CANID *can_id_struct, uint8_t *data, size_t* length);
{%- endif -%}
{%- if device.services.server %}
int nova_can_{{snakecase(device.name)}}_servers_rx (NOVA_CAN_CANID *can_id_struct, uint8_t *data, size_t* length);
{%- endif -%}
{%- if device.services.client %}
int nova_can_{{snakecase(device.name)}}_clients_rx (NOVA_CAN_CANID *can_id_struct, uint8_t *data, size_t* length);
{%- endif %}

int nova_can_{{snakecase(device.name)}}_rx (void);
{%- if device.messages.transmit %}
int nova_can_{{snakecase(device.name)}}_tx (MSG_TRANSMIT_PORT port, void *payload, uint8_t priority, bool broadcast, uint8_t destination_id);
{%- endif %}

{%- if header_only %}
// Implementations in header only mode
{%- include 'nova_can_device_impl.j2' -%}
{%- endif %}

#endif // {{ header_guard }}
